== What is programming?

“Programming” is the act of creating instructions for a system on what to do or how to behave.

Notice that the above definition mentions nothing about “computers” or “writing code”. “Writing code for computers” happens to be the most common form of programming, but we can learn a lot about programming without throwing “computers” or “code” into the mix.

It's likely that you're already a programmer, but you probably don't realize it. Have you ever:

  - set the microwave to run for 1:00 minute at 50% power?
  - set an alarm clock?
  - texted directions to a friend on how to get someplace?
  - written down a recipe for your special chocolate chip cookies?

If so, then you've programmed already.

It's also likely that you've been on the receiving end of a program, that is, you've “been programmed” before:

 - built a Lego set according to instructions
 - folded some origami according to instructions
 - played a song from sheet music
 - written a todolist for yourself
// (whoah... programming yourself)

Lets break down a few of these situations.

// TODO: segway

A *programmer* gets a *system* to perform *side effects* by providing a *program* via an *interface*.

// TODO: explain each concept

.Figure
[horizontal]
*Programmer*::
  you
*System*::
  microwave
*Interface*::
  buttons or dials
*Program*::
  1:00 time, 50% power
*Side Effects*::
  - turns on when you press start!
  - runs at 50% power for 1:00 minute
  - turns off

.Figure
[horizontal]
*Programmer*::
  you
*System*::
  your friend
*Interface*::
  SMS message (freeform english text)
*Program*::
  ex.
    Take Hwy 102 south
    Exit on Fake St.
    Turn left on Imaginary Blvd.
    Turn right on Nowhere Rd.
    House # is 55.
*Side Effects*::
  friend finds his way to your home

--
.Exercise
Fill in the table for the other examples
--

--
.Exercise
Come up with a few examples
--
// football coach writing down a play
// scriptwriter writing a movie script
// drug prescriptions
// ikea instructions
// how-to guides


=== What vs. How

Our original definition of programming [ref], mentions that the instructions we create while programming describe *what* a system should do or *how* it should behave.

The difference between the two is very subtle.

Consider a cookie recipe:

```
Cookie Recipe:
  what:
    make some chocolate chip cookies
  how:
    1. gather the following materials: ...
    2. gather the following tools: ...
    3. mix together ... in a bowl
    4. scoop onto a pan
    5. bake in a preheated oven at 450 for 20 minutes
```

Each of the above steps assumes the reader knows how to perform each of the actions (mix, scoop, etc.).

Notice how each “how” step could be treated as a “what”, and broken down further:

```
  what:
   mix together ... in a bowl
  how:
    1. place empty bowl on counter
    2. add ... cups of ... into bowl
    3. add ... spoons of ... into bowl
    4. ...
    5. mix with a wooden spoon
```

```
 what:
   mix with a wooden spoon
 how:
   1. insert spoon into bowl with ingredients
   2. move spoon in a circular motion
   3. stop when you can no longer tell ingredients apart
```

We could keep going deeper and deeper...

    |
    --
   /  \
  /\  /\
 /\/\/\/\

In practice, we stop at some point; where we stop depends on what level of instructions we expect the “system” that is processing the instructions to understand.

For our cookie recipe, if you are writing it for a friend who has baked before, (1) is probably sufficient, but for someone who has never stepped inside a kitchen, you may need to go a level or two deeper. If you're trying to create a cookie making robot, you'd need to get down to the level of “emit a 5V signal on this wire for 0.5s” (to turn on a motor, to move the arm, to pick up the spoon...)

Also notice that the language that is used varies; an experienced cook probably knows what “braising” means, but a beginner would need that explained; a pianist knows what “allegro” means, but most people don't; these domain-specific terms are used to save time. When you need to explain something, you adapt your language based on what your audience understand. It's the same with programming - a programmer needs to adapt their language to what the processor (be it a computer or an aspiring chef) can understand.

// TODO segway...

“levels of abstraction”

// TODO expand

We've already made a few important observations about programming:


// TODO need a good word for "programmable system"

// TODO clean up:

 - programmer
 - systems that process instructions (of various forms)
 - instructions (following various rules, “languages”)
 - instructions can be written at various levels of abstraction
      a “what” broken down into a number of “how” steps
      or, a group of “how” steps “abstracted” into a “what”
 - a programmer needs to know what the system understands to be able to create instructions for the system

The last observation is especially important. To program a system, you must know what a system can do and what instructions it understands. Most of programming is learning about various systems that can be programming and _then_ applying that knowledge to make those systems do what you want.

=== Chapter Title

There are hundreds of different kinds of “computers” (desktops, laptops, tablets, phones, watches, cars, refrigerators), and each is composed of hundreds of interoperating systems. (ref appendix: down the computer rabbit hole)
Fortunately, much of what programming entails is transferable between different programmable systems.

In this book, you'll be learning the basics of “how to program”, or perhaps more accurately, to learn to “think like a programmer”.

What you will be programming, and the language you'll be programming in doesn't really matter. But... in order to teach you how to program (in general), this book will also teach you how to program web applications with a real, practical programming language: Clojure [ref: .
<<_why_clojure>>].

But before we start learning Clojure proper, let's make a few more observations about systems and instructions using a simple made-up system.
