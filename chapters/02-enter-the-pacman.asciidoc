== Enter the Pacman

=== Instructions and Abstraction II

We write programs to solve a certain *problem* using a certain *system*. The system we choose contrains us in the way we can program it, and the problem we choose constrains in the way we solve it.

Our program is the mediator between these two domains (the “problem” domain and the “solution” domain) and will often be made of many layers (of abstraction, as we had learned in the previous chapter).

Here is a Pacman-bot system:

// TODO more intro to system

.Figure
image::figures/pacmanbot-system-board.svg[]

Let's take the role of designers of this system. As the designers, we want to provide other people the ability to program Pacman-bot to move around the board (presumably to get the Cherry and avoid the Ghosts, but who knows what people will come up with). How might we allow people to program Pacman-bot?

--
.Exercise
Try to come up with a set of instructions that someone else could use to instruct pacman-bot to move around the board.
--

--
.Exercise
Test it out on yourself (or a friend) to make sure that Pacman could get from any one place to any other place using the instructions.
--




Here are a few possible sets:

[cols="1,3a,5a",options="header"]
|===
| Set
| Instructions
| Sample Program

| A
|
----
forward back left right
----
|
// TODO: actually get to cherry
----
forward
forward
left
forward
right
----

| B
|
----
up down left right
----
(from pacman's point of view)
|
----
up
up
down
right
----


| C
|
----
^ v < >
----
|
----
^>>>>>^>v>>>
----

| D
|
----
forward rotate-right
----
|
----
forward
rotate-right
forward
forward
rotate-right
----


| E
|
----
nX eX wX sX
----
(where X is the number of times to repeat the preceding direction)
|
----
n5w2n5
----

| F
|
----
(goto! x y)
----
(where x and y are integers corresponding to the row and column, respectively)
|
----
(goto! 1 4)
(goto! 1 1)
----

| G
|
----
(find! object)
----
(where object is one of: cherry or ghost)
|
----
(find! cherry)
----

| H
|
----
go!
----
(which makes the bot go to the cherry)
|
----
go!
----
|===

What we've come up with are programming languages! They are very limited, but, yes, they are programming languages. (Now you can tell your friends that not only can you program, but you've _designed_ a programming language!)

(Also worth noting: all the examples above are text-based instruction languages, but you could also have come up with visual instruction systems (drawing a map, using colors, using pictograms), a sound-based system, a hand gesture system... anything)

--
.Exercise
For each language, write down the instructions to get pacman from his starting location to the cherry.
--

A few things to notice:

 - there's more than one possible way to define an instruction set for a given system
 - some instruction sets require more explanation (“documentation”) than others
 - some instruction sets are easier than others to solve a problem with
 - some instruction sets result in more instructions than others (but might be easier to solve the problem with)
 - some instruction sets are harder than others to read after the fact (but maybe easier to solve the problem with)
 - given an instruction set, there's more than one way to solve a problem
 - instruction sets aren't enough, a language must also define how instructions are to be combined (and as programmers, we must understand not just what instructions are available, but how they can be combined)

Later in this book we will be learning about the Clojure language and all the instructions it supports and how we can combine them to solve problems.

Before we move on from pacman-bot, let's try the following: can we convert between the different pacman-bot languages? If someone gave us pacman-bot that only understood Language X (`v>^<`) could we still program pacman-bot to understand a Language Y program (`n5e3w1`)? If `v>^<` are the only instructions that Language X allows, then the answer is “no”, at least not directly, but we could write another system that could convert from Language Y to Language X. It might look something like this:

----
nX means repeat "^" X times
wX means repeat "<" X times
eX means repeat ">" X times
sX means repeat "v" X times
----

Can you see how the rules above would allow us to convert from `n5e3w1` to `^^^^^>>><`?

// TODO will need to add an extra step here, jumping all the way to goto is too fast

Now how about converting from Language Z `(goto! x y)` to Language Y `v>^>`? Ponder that for a moment.

Hmmm...

We have a problem. In order to make pacman-bot follow the `(goto! 3 1)` instruction using the `v>^<` instructions, we need to know where pacman-bot is before we give him the command. Before, with Language X, we were able to blindly convert from one language to another, but this time, we need some information first (pacman-bot's starting location).

// TODO start with an actual example, before the pacmanX variables

// TODO add X and Y columns labeled
image::figures/pacmanbot-system-board.svg[]

In our pacmanbot-system, pacmanbot's location is at `(x,y) = (3,4)`.

Lets refer to pacman bot's starting location as pacmanX and pacmanY (so, for figure1 we would say that pacmanX is 3 and pacmanY is 4).

Now, back to our problem: how do we go from an instruction like `(goto! 3 1)` to `v>^<` style instructions? (knowing that pacman-bot starts at `pacmanX` and `pacmanY`)

--
.Exercise
Try to come up with some rules to make the conversion possible. Use any words you want. It might take a little more math this time.
--

One way we could write down the rules could be:

----
given pacmanX is some number indicating pacman-bot's starting X position
given pacmanY is some number indicating pacman-bot's starting Y position

(goto! targetX targetY) means:
   if targetX is greater than pacmanX:
      repeat ">" (targetX - pacmanX) times
   if targetX is less than pacmanX:
      repeat "<" (pacmanX - targetX) times
   if targetY is greater than pacmanY:
      repeat "v" (targetY - pacmanY) times
   if targetY is less than pacmanY:
      repeat "^" (pacmanY - targetY) times
----

--
.Exercise
Follow the rules above to convert from `(goto! 3 1)` to `v>^<` instructions, given that pacman-bot starts at his location in Figure 1: [3, 4].

Got it? Now, follow the `v>^<` instructions to make sure our conversion did things correctly. Does it work?
--

Our `goto!` command depends on pacman-bot's initial position (`pacmanX` and `pacmanY`), which we could also say is pacman-bots “initial state”.
The command also needs to be given the `targetX` and `targetY`, which are pacman-bot's final target position (or “end state”). We can think of our `goto!` command as “taking pacman-bot from some initial state to some target state.”

What if we wanted to implement Language Z now `(find! object)`?

First off... we need some extra information.  Whereas before, we were given the location to go to as part of the instructions, ex. `(goto! 3 1)`, now we will be given an object, either the cherry or the ghost, so we will need to know their locations. Lets call the cherry's location `cherryX` and `cherryY`, and the ghost's location `ghostX` and `ghostY`.

We could implement the `(find! object)` command as follows:

----
pacmanX, pacmanY, cherryX, cherryY, ghostX, ghostY are the X Y position of pacman, cherry and ghost

(find! object) means:
   if object is cherry:
     if cherryX is greater than pacmanX:
        repeat ">" (cherryX - pacmanX) times
     if cherryX is less than pacmanX:
        repeat "<" (pacmanX - cherryX) times
     if cherryY is greater than pacmanY:
        repeat "v" (cherryY - pacmanY) times
     if cherryY is less than pacmanY:
        repeat "^" (pacmanY - cherryY) times
   if object is ghost:
     if ghostX is greater than pacmanX:
        repeat ">" (ghostX - pacmanX) times
     if ghostX is less than pacmanX:
        repeat "<" (pacmanX - ghostX) times
     if ghostY is greater than pacmanY:
        repeat "v" (ghostY - pacmanY) times
     if ghostY is less than pacmanY:
        repeat "^" (pacmanY - ghostY) times
----

Our instructions here are very similar to what we had before with `(goto! x y)`. They're also very repetitive.

What if we could just use `(goto! x y)` inside of our `(find! object)` command? What might that look like?

--
.Exercise
Try to rewrite our `find!` command using `goto!`.
--


Here's what we might end up with:

----
given we have pacmanX, pacmanY, cherryX, cherryY, ghostX, ghostY as defined before

given we have `goto!` as defined before

(find! object) means:
  if object is cherry:
    (goto! cherryX cherryY)
  if object is ghost:
    (goto! ghostX ghostY)
----

Bam! That's all we need. Ponder it for a moment.

What we've done is pretty impressive. We've written rules so we can convert from `(find! object)` to `(goto! x y)` to `v>^<` style instructions.

Another way to think about it, is that we've written instructions at “different levels of abstractions” (from chapter 1, remember?)

  find!
   |
 goto!
/ | | \
v > ^ <


Later, we'll learn that the `find!` and `goto!` commands we defined would typically be called “functions”. `v`, `>`, `^` and `<` could also be called “functions”, except in our examples, `v>^<` were provided to us by the pacman-bot system, while `find!` and `goto!` we created ourselves.

Defining “functions” that call other “functions” (...that call other “functions”, that call other “functions”...) is one of the primary activites of “real world” programming.


